/**
 * Gets the top form
 * @returns {import("atomico").Ref<HTMLFormElement>}
 */
export function useForm(): import("atomico").Ref<HTMLFormElement>;
/**
 * Allows you to listen to the native events of the form
 * @template {keyof FormEvents} T
 * @param {T} name
 * @param {FormHandler<T>} handler
 * @param {boolean|AddEventListenerOptions} [options]
 */
export function useFormListener<T extends keyof FormEvents>(name: T, handler: FormHandler<T>, options?: boolean | AddEventListenerOptions | undefined): void;
/**
 * Render an input hidden to pass values to forms
 * @param {string} name
 * @param {string} value
 */
export function useFormInputHidden(name: string, value: string): void;
export type SubmitEvent = {
    formData: FormData;
};
export type FormDataEvent = {
    submitter: HTMLElement;
};
export type FormEvents = {
    formdata: FormDataEvent & Event;
    submit: SubmitEvent & Event;
    reset: Event;
    change: Event;
    input: Event;
};
export type FormHandler<T extends keyof FormEvents> = (ev: FormEvents[T]) => any;
