/**
 * create a channel to receive or transmit information through the DOM
 * @template T
 */
export class Channel<T> extends Event {
    /**
     * @param {HTMLElement} host
     * @param {string} type
     */
    constructor(host: HTMLElement, type: string, composed?: boolean);
    host: HTMLElement;
    /**
     *
     * @param {T} state
     */
    cast(castDown: any): void;
    castDown: any;
    /**
     * Connect the channel to the DOM event system
     * @param {(cast:T)=>any} observe
     */
    connect(observe: (cast: T) => any): void;
    observe: (cast: T) => any;
    /**
     * Disconnect the channel to the DOM event system
     */
    disconnect(): void;
    /**
     * @param {Channel} parent
     */
    _sync(parent: Channel<any>): void;
    castUp: any;
    #private;
}
