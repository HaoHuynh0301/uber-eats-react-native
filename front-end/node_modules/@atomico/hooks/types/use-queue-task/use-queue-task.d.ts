/**
 * Create a queue of tasks associated by an ID, either of the type object or string,
 * if an ID replaces an existing process, the previously defined process
 * will be ignored.
 * @template V, R
 * @param {(value:V)=>Promise<R>} map
 * @param {any} id
 * @returns {[Task<R>, (value:V)=>void, Map<any,Task<R>>]}
 */
export function useQueueTask<V, R>(map: (value: V) => Promise<R>, id: any): [Task<R>, (value: V) => void, Map<any, Task<R>>];
export type Task<R> = {
    status: TaskStatus;
    result?: R | undefined;
    timeStamp: number;
    task: Promise<R>;
};
export type TaskStatus = Exclude<import("../use-promise/use-promise").PromiseStatus, "">;
